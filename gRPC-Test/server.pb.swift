// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: messaging/server.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Server_DatabaseInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var message: String = String()

  public var help: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Server_CreatureName {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Server_Creature {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// MongoDB _id field
  public var name: String = String()

  public var lastUpdated: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _lastUpdated ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_lastUpdated = newValue}
  }
  /// Returns true if `lastUpdated` has been explicitly set.
  public var hasLastUpdated: Bool {return self._lastUpdated != nil}
  /// Clears the value of `lastUpdated`. Subsequent reads from it will return its default value.
  public mutating func clearLastUpdated() {self._lastUpdated = nil}

  public var sacnIp: String = String()

  public var universe: UInt32 = 0

  public var dmxBase: UInt32 = 0

  public var numberOfMotors: UInt32 = 0

  public var motors: [Server_Creature.Motor] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum MotorType: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case servo // = 0
    case stepper // = 1
    case UNRECOGNIZED(Int)

    public init() {
      self = .servo
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .servo
      case 1: self = .stepper
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .servo: return 0
      case .stepper: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public struct Motor {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var type: Server_Creature.MotorType = .servo

    public var number: UInt32 = 0

    public var maxValue: UInt32 = 0

    public var minValue: UInt32 = 0

    public var smoothingValue: Double = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _lastUpdated: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

#if swift(>=4.2)

extension Server_Creature.MotorType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Server_Creature.MotorType] = [
    .servo,
    .stepper,
  ]
}

#endif  // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
extension Server_DatabaseInfo: @unchecked Sendable {}
extension Server_CreatureName: @unchecked Sendable {}
extension Server_Creature: @unchecked Sendable {}
extension Server_Creature.MotorType: @unchecked Sendable {}
extension Server_Creature.Motor: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "server"

extension Server_DatabaseInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DatabaseInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "message"),
    2: .same(proto: "help"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.help) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 1)
    }
    if !self.help.isEmpty {
      try visitor.visitSingularStringField(value: self.help, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Server_DatabaseInfo, rhs: Server_DatabaseInfo) -> Bool {
    if lhs.message != rhs.message {return false}
    if lhs.help != rhs.help {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Server_CreatureName: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreatureName"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Server_CreatureName, rhs: Server_CreatureName) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Server_Creature: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Creature"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "last_updated"),
    3: .standard(proto: "sacn_ip"),
    4: .same(proto: "universe"),
    5: .standard(proto: "dmx_base"),
    6: .standard(proto: "number_of_motors"),
    7: .same(proto: "motors"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._lastUpdated) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.sacnIp) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.universe) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.dmxBase) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self.numberOfMotors) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.motors) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try { if let v = self._lastUpdated {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.sacnIp.isEmpty {
      try visitor.visitSingularStringField(value: self.sacnIp, fieldNumber: 3)
    }
    if self.universe != 0 {
      try visitor.visitSingularUInt32Field(value: self.universe, fieldNumber: 4)
    }
    if self.dmxBase != 0 {
      try visitor.visitSingularUInt32Field(value: self.dmxBase, fieldNumber: 5)
    }
    if self.numberOfMotors != 0 {
      try visitor.visitSingularUInt32Field(value: self.numberOfMotors, fieldNumber: 6)
    }
    if !self.motors.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.motors, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Server_Creature, rhs: Server_Creature) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs._lastUpdated != rhs._lastUpdated {return false}
    if lhs.sacnIp != rhs.sacnIp {return false}
    if lhs.universe != rhs.universe {return false}
    if lhs.dmxBase != rhs.dmxBase {return false}
    if lhs.numberOfMotors != rhs.numberOfMotors {return false}
    if lhs.motors != rhs.motors {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Server_Creature.MotorType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SERVO"),
    1: .same(proto: "STEPPER"),
  ]
}

extension Server_Creature.Motor: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Server_Creature.protoMessageName + ".Motor"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "number"),
    3: .standard(proto: "max_value"),
    4: .standard(proto: "min_value"),
    5: .standard(proto: "smoothing_value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.number) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.maxValue) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.minValue) }()
      case 5: try { try decoder.decodeSingularDoubleField(value: &self.smoothingValue) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .servo {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    if self.number != 0 {
      try visitor.visitSingularUInt32Field(value: self.number, fieldNumber: 2)
    }
    if self.maxValue != 0 {
      try visitor.visitSingularUInt32Field(value: self.maxValue, fieldNumber: 3)
    }
    if self.minValue != 0 {
      try visitor.visitSingularUInt32Field(value: self.minValue, fieldNumber: 4)
    }
    if self.smoothingValue != 0 {
      try visitor.visitSingularDoubleField(value: self.smoothingValue, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Server_Creature.Motor, rhs: Server_Creature.Motor) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.number != rhs.number {return false}
    if lhs.maxValue != rhs.maxValue {return false}
    if lhs.minValue != rhs.minValue {return false}
    if lhs.smoothingValue != rhs.smoothingValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
